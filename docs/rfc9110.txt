1.3 Core Semantics

- Messages can either be a Request or a Response
- Server:
  1. Listens for requests
  2. Parses each message received
  3. Interprets message semantics in relation to target resource
  4. Responds to that request with X amount of responses

- Client:
  1. Examines received responses
  2. Determine what to do according to status codes & content received

2.1 Syntax Notation
- Follows ABNF (RFC5234)
- Important rules: 
  ALPHA(letters),
  CR(carriage return),
  CRLF(cr lf),
  CTL(controls),
  DIGIT(decimal 0-9),
  DQUOTE(double quote),
  HEXDIG(hexadecimal 0-9,A-F,a-f),
  HTAB(horizontal tab),
  LF(line feed),
  OCTET(any 8-bit sequence of data),
  SP(space),
  VCHAR(any visible US-ASCII char)

2.2 Requirements Notation
- An implementation is considered conformant if it compiles with all of the requirements
  associated with the roles it partakes in HTTP.
  - So I only have to implement the "REQUIRED" marked specifications?

- Conformance to HTTP includes both conformance to the particular messaging syntax of the
  protocol version in use and conformance to the semantics of protocol elements sent.

2.3 Length Requirements
- Parse defensively. Only expect ABNF grammar and use a reasonable buffer size.
- A recipient MUST be able to parse and process protocol element length, that are
  at least as long as the values that it generates for those same protocol elements in other messages

2.4 Error Handling
- A recipient MUST interpret a received protocol element according to the semantics defined for it by
  this specification, including extensions to this specification, unless the sender incorrectly implements
  waht is implied by those semantics.
- HTTP does not define specific error handling machanisms except when they have a direct impact on security.

3. Terminology and Core Concepts
3.1 Resources
- The target of an HTTP request is called a "resource".
- Most resources are identified by a URI
- HTTP relies upon the URI standard to indicate the target resource and relationship between resources.

3.3. Connections, Clients and Servers
- HTTP is a Client/Server protocol that operates over a reliable transport- or session layer.
- Client:
  - Establishes a connection to a server for the purpose of sending HTTP requests.
- Server:
  - Accepts connections to service HTTP requests by sending responses.

- The terms client/server refer only to the roles that these programs perform for a particular connection.
  The same program can act as a client or server depending on the particular connection.

- HTTP is a stateless protocol, meaning the requests message can be understood in isolation.
- A server MUST NOT assume that two requests on the same connection are from the same user agent, unless the
  connection is secured and specific to that agent.

3.4. Messages

