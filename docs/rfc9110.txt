1.3 Core Semantics

- Messages can either be a Request or a Response
- Server:
  1. Listens for requests
  2. Parses each message received
  3. Interprets message semantics in relation to target resource
  4. Responds to that request with X amount of responses

- Client:
  1. Examines received responses
  2. Determine what to do according to status codes & content received

2.1 Syntax Notation
- Follows ABNF (RFC5234)
- Important rules: 
  ALPHA(letters),
  CR(carriage return),
  CRLF(cr lf),
  CTL(controls),
  DIGIT(decimal 0-9),
  DQUOTE(double quote),
  HEXDIG(hexadecimal 0-9,A-F,a-f),
  HTAB(horizontal tab),
  LF(line feed),
  OCTET(any 8-bit sequence of data),
  SP(space),
  VCHAR(any visible US-ASCII char)

2.2 Requirements Notation
- An implementation is considered conformant if it compiles with all of the requirements
  associated with the roles it partakes in HTTP.
  - So I only have to implement the "REQUIRED" marked specifications?

- Conformance to HTTP includes both conformance to the particular messaging syntax of the
  protocol version in use and conformance to the semantics of protocol elements sent.

2.3 Length Requirements
- Parse defensively. Only expect ABNF grammar and use a reasonable buffer size.
- A recipient MUST be able to parse and process protocol element length, that are
  at least as long as the values that it generates for those same protocol elements in other messages

2.4 Error Handling
- A recipient MUST interpret a received protocol element according to the semantics defined for it by
  this specification, including extensions to this specification, unless the sender incorrectly implements
  waht is implied by those semantics.
- HTTP does not define specific error handling machanisms except when they have a direct impact on security.

3. Terminology and Core Concepts
3.1 Resources
- The target of an HTTP request is called a "resource".
- Most resources are identified by a URI
- HTTP relies upon the URI standard to indicate the target resource and relationship between resources.

3.3. Connections, Clients and Servers
- HTTP is a Client/Server protocol that operates over a reliable transport- or session layer.
- Client:
  - Establishes a connection to a server for the purpose of sending HTTP requests.
- Server:
  - Accepts connections to service HTTP requests by sending responses.

- The terms client/server refer only to the roles that these programs perform for a particular connection.
  The same program can act as a client or server depending on the particular connection.

- HTTP is a stateless protocol, meaning the requests message can be understood in isolation.
- A server MUST NOT assume that two requests on the same connection are from the same user agent, unless the
  connection is secured and specific to that agent.

3.4. Messages
- Request:
  - Can contain header fields for request modifiers, client information and representation metadata,
    content intended for processing in accordance with the method and trailer fields

- Response:
  - A request can have multiple responses
  - Includes status code
  - Can contain header fields for server information, resource metadata, representation metadata, content
    to be interpreted in accordance with the status code and trailer fields

3.5. User Agents
- The term refers to any client program that initiates a request.
- Most familiar form is the general purpose web browser, but can be other stuff: billboard screens, light bulbs,
  command-line tools, anything really.
- Does not imply a human user!

3.6. Origin Server
- The term refers to a program that can originate authoritative responses for a given target resource.

3.7. Intermediaries
- HTTP enables intermediaries to satisfy requests through a chain of connections.
- There are three common forms: Proxy, Gateway and Tunnel.
- All messages flow from "upstream" to "downstream".
- Inbound means toward the origin server
- Outbound means toward the user agent

- Proxy:
  - Is a message forwarding agent that is chosen by the client
  - Commonly used to group an organizations HTTP requests through a common intermediary for the sake of
    security services, annotation services or shared caching.
    
- Gateway:
  - Also known as "reverse proxy"
  - Acts as an origin server for the outbound connection but translates received requests and forwards
    them inbound to another server or servers.
  - Often used for to improve server performance through caching or to enable load balancing of HTTP services
  - All HTTP requirements applicable to an origin server also apply to the outbound communication gateway.

- Tunnel:
  - Acts as a blind relay between two connections without changing the messages.
  - Is not considered a party of the HTTP communication.
  - Ceases to exist when both ends of the relayed connection are closed.

3.8. Caches
- A cache is a local store of previous response messages and the subsyste, that controls its message store,
  retrieval and deletion.
- Can not be used while client & server are acting as a tunnel.
- Used to shorten request/response chain.
- A response is cacheable if a cache is allowed to store a copy of the response message for use in answering
  subsequent requests.
- Caching is defined in RFC9111

3.9. Example Message Exchange
- The following example illustrates a typical HTTP/1.1 message exchange for a GET request on the
  URI "http://www.example.com/hello.txt"

Client request:

GET /hello.txt HTTP/1.1
User-Agent: curl/7.64.1
Host: www.example.com
Accept-Language: en, mi


Server response:

HTTP/1.1 200 OK
Date: Mon, 27 Jul 2009 12:28:54 GMT
Server: Apache
Last-Modified: Wed, 22 Jul 2009 19:15:56 GMT
ETag: "34aa387-d-1235123eb00"
Accept-Ranges: bytes
Content-Length: 51
Vary: Accept-Encoding
Content-Type: text/plain

Hello World! My content includes a trailing CRLF.


4. Identifiers in HTTP
- Uniform Resource Identifiers (URI) are used throughout HTTP as the means for identifying resources.

4.1. URI References
- RFC3986

4.2. HTTP-Related URI Schemes
- http:
  definition: http-URI = "http" "://" authority path-abempty [ "?" query ]
  - authority: is the origin server which includes a host identifier and an optional port number.
    -> If port is empty it defaults to TCP port 80
  - A sender MUST NOT generate an "http" URI with an empty host identifier. A recipient that processes such
  a URI reference MUST reject it as invalid.
  - The path component and optional query identify the target resource within that origin servers namespace.

- https:
  definition: http-URI = "https" "://" authority path-abempty [ "?" query ]
  - Is capable of establishing a TLS connection that has been secured for HTTP communication.
  - Secured means that the server has been authenticated as acting on behalf of the identified authority
    and all HTTP communication with that server has confidentiality and integrity protection that is
    acceptable to both client and server.
  - If the port is empty, TCP port 443 is the default.
  - A sender MUST NOT generate an https URI with an empty host identifier. A recipient that processes such
  a URI reference MUST reject it as invalid.
  - A client MUST ensure that its HTTP requests for an "https" resource are secured, prior to being
  communicated, and that it only accepts secured responses to those requests.

4.2.3. http(s) Normalization and Comparison
- URIs with an "http" or "https" scheme are normalized and compared according to the methods defined in Section
  6 of [URI]
- If the port is equal to the default port for a scheme, the normal form is to omit the port.
- When not being used as the target of an OPTIONS request, an empty path component is equivalent to an
  absolute path of "/", so the normal form is to provide a path of "/" instead.
- The scheme and host are case-insensitive and normally provided in lowercase; all other components
  are compared in a case-sensitive manner.
- Characters other than those in the reserved set are equivalent to their percent-encoded octets:
  the normal form is to not encode them

- Two HTTP URIs that are equivalent after normalization can be assumed to identify the same resource.

4.2.4.
- A receipient SHOULD parse for userinfo and treat its presence as an error.

4.3. Authoritative Access
- Refers to dereferencing a given identifier, for the sake of access to the identified resource, in a way
  the client believes is authorative.
